{"version":3,"sources":["InfoBox.js","LineGraph.js","util.js","Map.js","Table.js","App.js","reportWebVitals.js","index.js"],"names":["InfoBox","title","cases","isRed","active","total","props","Card","onClick","className","CardContent","Typography","color","options","legend","display","elements","point","radius","maintainAspectRatio","tooltips","mode","intersect","callbacks","label","tooltipItem","data","numeral","value","format","scales","xAxes","type","time","tooltipFormat","yAxes","gridLines","ticks","callback","index","values","LineGraph","casesType","useState","setData","buildChartData","caseType","lastPoint","chartData","date","newPoint","x","y","push","useEffect","a","fetch","then","response","json","console","log","fetchData","length","datasets","backgroundColor","borderColor","casesTypeColors","hex","rgb","half_op","multiplier","recovered","deaths","sortData","sort","b","preetyPrintStat","stat","showDataOnMap","map","country","Circle","center","countryInfo","lat","long","fillOpacity","fillColor","Math","sqrt","Popup","style","backgroundImage","flag","ChangeMapView","coords","useMap","setView","lng","getZoom","Map","zoom","countries","TileLayer","url","attribution","Table","App","setCountries","setCountry","setCountryInfo","tableData","setTableData","mapCenter","setMapCenter","mapZoom","setMapZoom","mapCountries","setMapCountries","setCasesType","name","iso2","sortedData","getCountriesData","onCountrychange","event","countryCode","target","FormControl","Select","variant","onChange","MenuItem","todayCases","todayRecovered","todayDeaths","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.5b4b7edc.chunk.js","sourcesContent":["import { Card, CardContent, Typography } from \"@material-ui/core\";\nimport React from \"react\";\nimport \"./InfoBox.css\";\nfunction InfoBox({ title, cases, isRed, active, total, ...props }) {\n  return (\n    <div>\n      <Card onClick={props.onClick} className=\"infoBox\">\n        <CardContent\n          className={`infoBox ${active && \"infoBox--selected\"} ${\n            isRed && \"infoBox--red\"\n          }`}\n        >\n          {/* title */}\n          <Typography className=\"infoBox__title\" color=\"textSecondary\">\n            {title}\n          </Typography>\n\n          {/* Number of cases */}\n          <h2 className={`infoBox__cases ${!isRed && \"infoBox__cases--green\"}`}>\n            {cases}\n          </h2>\n\n          {/* Total cases */}\n          <Typography className=\"infoBox__total\" color=\"textSecondary\">\n            Total {total}\n          </Typography>\n        </CardContent>\n      </Card>\n    </div>\n  );\n}\n\nexport default InfoBox;\n","import React, { useState, useEffect } from \"react\";\nimport { Line } from \"react-chartjs-2\";\nimport numeral from \"numeral\";\n\nconst options = {\n  legend: {\n    display: false,\n  },\n  elements: {\n    point: {\n      radius: 0,\n    },\n  },\n  maintainAspectRatio: false,\n  tooltips: {\n    mode: \"index\",\n    intersect: false,\n    callbacks: {\n      label: function (tooltipItem, data) {\n        return numeral(tooltipItem.value).format(\"+0,0\");\n      },\n    },\n  },\n  scales: {\n    xAxes: [\n      {\n        type: \"time\",\n        time: {\n          format: \"MM/DD/YY\",\n          tooltipFormat: \"ll\",\n        },\n      },\n    ],\n    yAxes: [\n      {\n        gridLines: {\n          display: false,\n        },\n        ticks: {\n          callback: function (value, index, values) {\n            return numeral(value).format(\"0a\");\n          },\n        },\n      },\n    ],\n  },\n};\n\nconst LineGraph = ({ casesType = \"cases\", ...props }) => {\n  const [data, setData] = useState({});\n\n  const buildChartData = (data, caseType) => {\n    const chartData = [];\n    let lastPoint;\n    for (let date in data.cases) {\n      if (lastPoint) {\n        const newPoint = {\n          x: date,\n          y: data[caseType][date] - lastPoint,\n        };\n        chartData.push(newPoint);\n      }\n      lastPoint = data[caseType][date];\n    }\n    return chartData;\n  };\n\n  useEffect(() => {\n    const fetchData = async () => {\n      fetch(\"https://disease.sh/v3/covid-19/historical/all?lastdays=120\")\n        .then((response) => response.json())\n        .then((data) => {\n          console.log(data);\n          const chartData = buildChartData(data, casesType);\n          setData(chartData);\n        });\n    };\n    fetchData();\n  }, [casesType]);\n\n  return (\n    <div className={props.className}>\n      {data?.length > 0 && (\n        <Line\n          options={options}\n          data={{\n            datasets: [\n              {\n                backgroundColor: \"rgba(204, 16, 52, 0.5)\",\n                borderColor: \"#CC1034\",\n                data: data,\n              },\n            ],\n          }}\n        />\n      )}\n    </div>\n  );\n};\n\nexport default LineGraph;\n","import React from \"react\";\nimport numeral from \"numeral\";\nimport { Circle, Popup } from \"react-leaflet\";\n\nconst casesTypeColors = {\n  cases: {\n    hex: \"#CC1034\",\n    rgb: \"rgb(204, 16, 52)\",\n    half_op: \"rgba(204, 16, 52, 0.5)\",\n    multiplier: 300,\n  },\n  recovered: {\n    hex: \"#7dd71d\",\n    rgb: \"rgb(125, 215, 29)\",\n    half_op: \"rgba(125, 215, 29, 0.5)\",\n    multiplier: 400,\n  },\n  deaths: {\n    hex: \"#fb4443\",\n    rgb: \"rgb(251, 68, 67)\",\n    half_op: \"rgba(251, 68, 67, 0.5)\",\n    multiplier: 2000,\n  },\n};\n\nexport const sortData = (data) => {\n  const sortedData = [...data];\n  return sortedData.sort((a, b) => (a.cases > b.cases ? -1 : 1));\n};\n//convert Infobox number to 100k format\nexport const preetyPrintStat = (stat) => {\n  return stat ? `+${numeral(stat).format(\"0.0a\")}` : \"+0\";\n};\n\n// Draw circles on the map with interactive tooltip\nexport const showDataOnMap = (data, casesType) =>\n  data.map((country) => (\n    <Circle\n      center={[country.countryInfo.lat, country.countryInfo.long]}\n      fillOpacity={0.4}\n      color={casesTypeColors[casesType].rgb}\n      fillColor={casesTypeColors[casesType].rgb}\n      radius={\n        Math.sqrt(country[casesType]) * casesTypeColors[casesType].multiplier\n      }\n    >\n      <Popup>\n        <div className=\"info-container\">\n          <div\n            className=\"info-flag\"\n            style={{ backgroundImage: `url(${country.countryInfo.flag})` }}\n          />\n          <div className=\"info-name\">{country.country}</div>\n          <div className=\"info-confirmed\">\n            Cases:{numeral(country.cases).format(\"0,0\")}\n          </div>\n          <div className=\"info-recoverd\">\n            Recoverd:{numeral(country.recovered).format(\"0,0\")}\n          </div>\n          <div className=\"info-deaths\">\n            Deaths:{numeral(country.deaths).format(\"0,0\")}\n          </div>\n        </div>\n      </Popup>\n    </Circle>\n  ));\n","import React from \"react\";\nimport { MapContainer as LeafletMap, TileLayer, useMap } from \"react-leaflet\";\nimport \"./Map.css\";\nimport { showDataOnMap } from \"./util\";\n\nfunction ChangeMapView({ coords }) {\n  console.log(showDataOnMap);\n  const map = useMap();\n  map.setView([coords.lat, coords.lng], map.getZoom());\n\n  return null;\n}\n\nfunction Map({ center, zoom, countries, casesType }) {\n  console.log(casesType);\n  return (\n    <div className=\"map\">\n      <LeafletMap center={center} zoom={zoom}>\n        <TileLayer\n          url=\"https://{s}.tile.openstreetmap.org/{z}/{x}/{y}.png\"\n          attribution='&copy; <a href=\"http://osm.org/copyright\">OpenStreetMap</a> contributors'\n        />\n        <ChangeMapView coords={center} />\n        {showDataOnMap(countries, casesType)}\n      </LeafletMap>\n    </div>\n  );\n}\n\nexport default Map;\n","import React from \"react\";\nimport \"./Table.css\";\nimport numeral from \"numeral\";\nfunction Table({ countries }) {\n  return (\n    <div className=\"table\">\n      {countries.map(\n        (\n          { country, cases } //Destructuring on Map()\n        ) => (\n          <tr>\n            <td>{country}</td>\n            <td>\n              <strong>{numeral(cases).format(\"0.0a\")}</strong>\n            </td>\n          </tr>\n        )\n      )}\n    </div>\n  );\n}\n\nexport default Table;\n","import {\n  FormControl,\n  MenuItem,\n  Select,\n  Card,\n  CardContent,\n} from \"@material-ui/core\";\nimport React, { useState, useEffect } from \"react\";\nimport \"./App.css\";\nimport InfoBox from \"./InfoBox\";\nimport LineGraph from \"./LineGraph\";\nimport Map from \"./Map\";\nimport \"leaflet/dist/leaflet.css\";\nimport Table from \"./Table\";\nimport { sortData, preetyPrintStat } from \"./util\";\n\nfunction App() {\n  const [countries, setCountries] = useState([]);\n  const [country, setCountry] = useState(\"worldwide\");\n  const [countryInfo, setCountryInfo] = useState({});\n  const [tableData, setTableData] = useState([]);\n  const [mapCenter, setMapCenter] = useState({ lat: 34.80746, lng: -40.4096 });\n  const [mapZoom, setMapZoom] = useState(3.5);\n  const [mapCountries, setMapCountries] = useState([]);\n  const [casesType, setCasesType] = useState(\"cases\");\n\n  useEffect(() => {\n    fetch(\"https://disease.sh/v3/covid-19/all\")\n      .then((response) => response.json())\n      .then((data) => {\n        setCountryInfo(data);\n      });\n  }, []);\n\n  useEffect(() => {\n    //async--> send a request, wait for it, do something with the input\n    const getCountriesData = async () => {\n      await fetch(\"https://disease.sh/v3/covid-19/countries\")\n        .then((response) => response.json())\n        .then((data) => {\n          const countries = data.map((country) => ({\n            name: country.country, //India, United States, United Kingdom\n            value: country.countryInfo.iso2, //UK,USA,IND\n          }));\n\n          const sortedData = sortData(data);\n          setTableData(sortedData);\n          setCountries(countries);\n          setMapCountries(data);\n          console.log(sortedData);\n        });\n    };\n    getCountriesData(); //Important step !!!\n  }, []);\n  const onCountrychange = async (event) => {\n    const countryCode = event.target.value;\n    const url =\n      countryCode === \"worldwide\"\n        ? \"https://disease.sh/v3/covid-19/all\"\n        : `https://disease.sh/v3/covid-19/countries/${countryCode}`;\n\n    await fetch(url)\n      .then((response) => response.json())\n      .then((data) => {\n        setCountry(countryCode);\n\n        //All of the data\n        //from Country response\n\n        setCountryInfo(data);\n\n        const {\n          countryInfo: { lat, long },\n        } = data;\n        setMapCenter({ lat, lng: long });\n        setMapZoom(4);\n      });\n  };\n  console.log(countryInfo);\n  return (\n    <div className=\"app\">\n      <div className=\"app__left\">\n        <div className=\"app__header\">\n          <h1>🔴 COVID-19 TRACKER</h1>\n\n          <FormControl className=\"app__dropdown\">\n            <Select\n              variant=\"outlined\"\n              onChange={onCountrychange}\n              value={country}\n            >\n              <MenuItem value=\"worldwide\">Worldwide</MenuItem>\n              {/* loop throgh all the countries and show a dropdown */}\n              {countries.map((country) => (\n                <MenuItem value={country.value}>{country.name}</MenuItem>\n              ))}\n            </Select>\n          </FormControl>\n        </div>\n\n        <div className=\"app__stats\">\n          <InfoBox\n            isRed\n            active={casesType === \"cases\"}\n            onClick={() => setCasesType(\"cases\")}\n            title=\"CoronaVirus cases\"\n            total={preetyPrintStat(countryInfo.cases)}\n            cases={preetyPrintStat(countryInfo.todayCases)}\n          />\n\n          <InfoBox\n            active={casesType === \"recovered\"}\n            onClick={() => setCasesType(\"recovered\")}\n            title=\"Recoverd\"\n            total={preetyPrintStat(countryInfo.recovered)}\n            cases={preetyPrintStat(countryInfo.todayRecovered)}\n          />\n\n          <InfoBox\n            isRed\n            active={casesType === \"deaths\"}\n            onClick={() => setCasesType(\"deaths\")}\n            title=\"Deaths\"\n            total={preetyPrintStat(countryInfo.deaths)}\n            cases={preetyPrintStat(countryInfo.todayDeaths)}\n          />\n        </div>\n\n        <Map\n          casesType={casesType}\n          countries={mapCountries}\n          center={mapCenter}\n          zoom={mapZoom}\n        />\n      </div>\n      <Card className=\"app__right\">\n        <CardContent>\n          {/* Table */}\n          <h3>Live Cases by country</h3>\n          <Table countries={tableData} />\n          <h3 className=\"app__graphTitle\">Worldwide new {casesType}</h3>\n          {/* graph */}\n          <LineGraph className=\"app__graph\" casesType={casesType} />\n        </CardContent>\n      </Card>\n    </div>\n  );\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}